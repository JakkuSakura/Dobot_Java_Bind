package dobotdll;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : line 232</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ARCCmd extends Structure {
	/** C type : field1_struct */
	public field1_struct field1;
	/** C type : field2_struct */
	public field2_struct field2;
	/** <i>native declaration : line 233</i> */
	public static class field1_struct extends Structure {
		public float x;
		public float y;
		public float z;
		public float r;
		public field1_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("x", "y", "z", "r");
		}
		public field1_struct(float x, float y, float z, float r) {
			super();
			this.x = x;
			this.y = y;
			this.z = z;
			this.r = r;
		}
		public field1_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field1_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends field1_struct implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : line 239</i> */
	public static class field2_struct extends Structure {
		public float x;
		public float y;
		public float z;
		public float r;
		public field2_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("x", "y", "z", "r");
		}
		public field2_struct(float x, float y, float z, float r) {
			super();
			this.x = x;
			this.y = y;
			this.z = z;
			this.r = r;
		}
		public field2_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field2_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends field2_struct implements Structure.ByValue {
			
		};
	};
	public ARCCmd() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("field1", "field2");
	}
	/**
	 * @param field1 C type : field1_struct<br>
	 * @param field2 C type : field2_struct
	 */
	public ARCCmd(field1_struct field1, field2_struct field2) {
		super();
		this.field1 = field1;
		this.field2 = field2;
	}
	public ARCCmd(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ARCCmd implements Structure.ByReference {
		
	};
	public static class ByValue extends ARCCmd implements Structure.ByValue {
		
	};
}
