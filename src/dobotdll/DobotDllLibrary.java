package dobotdll;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * This file is created by JNAEater. x64.
 * JNA Wrapper for library <b>DobotDll</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface DobotDllLibrary extends Library {

	public static final byte FALSE = (byte)0;
	public static final byte TRUE = (byte)1;

	public static final String JNA_LIBRARY_NAME = "DobotDll";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(DobotDllLibrary.JNA_LIBRARY_NAME);
	public static final DobotDllLibrary INSTANCE = (DobotDllLibrary)Native.loadLibrary(DobotDllLibrary.JNA_LIBRARY_NAME, DobotDllLibrary.class);
	/**
	 * <i>native declaration : line 43</i><br>
	 * enum values
	 */
	public static interface HHTTrigMode {
		/** <i>native declaration : line 44</i> */
		public static final int TriggeredOnKeyReleased = 0;
		/** <i>native declaration : line 45</i> */
		public static final int TriggeredOnPeriodicInterval = 1;
	};
	/**
	 * <i>native declaration : line 60</i><br>
	 * enum values
	 */
	public static interface ArmOrientation {
		/** <i>native declaration : line 61</i> */
		public static final int LeftyArmOrientation = 0;
		/** <i>native declaration : line 62</i> */
		public static final int RightyArmOrientation = 1;
	};
	public static final int JogIdle = 0;
	public static final int JogAPPressed = 1;
	public static final int JogANPressed = 2;
	public static final int JogBPPressed = 3;
	public static final int JogBNPressed = 4;
	public static final int JogCPPressed = 5;
	public static final int JogCNPressed = 6;
	public static final int JogDPPressed = 7;
	public static final int JogDNPressed = 8;
	public static final int JogEPPressed = 9;
	public static final int JogENPressed = 10;
	/**
	 * <i>native declaration : line 143</i><br>
	 * enum values
	 */
	public static interface PTPMode {
		/** <i>native declaration : line 144</i> */
		public static final int PTPJUMPXYZMode = 0;
		/** <i>native declaration : line 145</i> */
		public static final int PTPMOVJXYZMode = 1;
		/** <i>native declaration : line 146</i> */
		public static final int PTPMOVLXYZMode = 2;
		/** <i>native declaration : line 148</i> */
		public static final int PTPJUMPANGLEMode = 3;
		/** <i>native declaration : line 149</i> */
		public static final int PTPMOVJANGLEMode = 4;
		/** <i>native declaration : line 150</i> */
		public static final int PTPMOVLANGLEMode = 5;
		/** <i>native declaration : line 152</i> */
		public static final int PTPMOVJANGLEINCMode = 6;
		/** <i>native declaration : line 153</i> */
		public static final int PTPMOVLXYZINCMode = 7;
		/** <i>native declaration : line 154</i> */
		public static final int PTPMOVJXYZINCMode = 8;
		/** <i>native declaration : line 156</i> */
		public static final int PTPJUMPMOVLXYZMode = 9;
	};
	/**
	 * <i>native declaration : line 201</i><br>
	 * enum values
	 */
	public static interface CPMode {
		/** <i>native declaration : line 202</i> */
		public static final int CPRelativeMode = 0;
		/** <i>native declaration : line 203</i> */
		public static final int CPAbsoluteMode = 1;
	};
	/**
	 * <i>native declaration : line 267</i><br>
	 * enum values
	 */
	public static interface TRIGMode {
		/** <i>native declaration : line 268</i> */
		public static final int TRIGInputIOMode = 0;
		/** <i>native declaration : line 269</i> */
		public static final int TRIGADCMode = 1;
	};
	/**
	 * <i>native declaration : line 272</i><br>
	 * enum values
	 */
	public static interface TRIGInputIOCondition {
		/** <i>native declaration : line 273</i> */
		public static final int TRIGInputIOEqual = 0;
		/** <i>native declaration : line 274</i> */
		public static final int TRIGInputIONotEqual = 1;
	};
	/**
	 * <i>native declaration : line 277</i><br>
	 * enum values
	 */
	public static interface TRIGADCCondition {
		/**
		 * Lower than<br>
		 * <i>native declaration : line 278</i>
		 */
		public static final int TRIGADCLT = 0;
		/**
		 * Lower than or Equal<br>
		 * <i>native declaration : line 279</i>
		 */
		public static final int TRIGADCLE = 1;
		/**
		 * Greater than or Equal<br>
		 * <i>native declaration : line 280</i>
		 */
		public static final int TRIGADCGE = 2;
		/**
		 * Greater Than<br>
		 * <i>native declaration : line 281</i>
		 */
		public static final int TRIGADCGT = 3;
	};
	/**
	 * <i>native declaration : line 291</i><br>
	 * enum values
	 */
	public static interface IOFunction {
		/** <i>native declaration : line 292</i> */
		public static final int IOFunctionDummy = 0;
		/** <i>native declaration : line 293</i> */
		public static final int IOFunctionDO = 1;
		/** <i>native declaration : line 294</i> */
		public static final int IOFunctionPWM = 2;
		/** <i>native declaration : line 295</i> */
		public static final int IOFunctionDI = 3;
		/** <i>native declaration : line 296</i> */
		public static final int IOFunctionADC = 4;
	};
	/**
	 * Firmware related<br>
	 * <i>native declaration : line 369</i><br>
	 * enum values
	 */
	public static interface FirmwareSwitchMode {
		/** <i>native declaration : line 370</i> */
		public static final int NO_SWITCH = 0;
		/** <i>native declaration : line 371</i> */
		public static final int DOBOT_SWITCH = 1;
		/** <i>native declaration : line 372</i> */
		public static final int PRINTING_SWITCH = 2;
		/** <i>native declaration : line 373</i> */
		public static final int DRIVER1_SWITCH = 3;
		/** <i>native declaration : line 374</i> */
		public static final int DRIVER2_SWITCH = 4;
		/** <i>native declaration : line 375</i> */
		public static final int DRIVER3_SWITCH = 5;
		/** <i>native declaration : line 376</i> */
		public static final int DRIVER4_SWITCH = 6;
		/** <i>native declaration : line 377</i> */
		public static final int DRIVER5_SWITCH = 7;
	};
	/**
	 * <i>native declaration : line 384</i><br>
	 * enum values
	 */
	public static interface FirewareMode {
		/** <i>native declaration : line 385</i> */
		public static final int INVALID_MODE = 0;
		/** <i>native declaration : line 386</i> */
		public static final int DOBOT_MODE = 1;
		/** <i>native declaration : line 387</i> */
		public static final int PRINTING_MODE = 2;
		/** <i>native declaration : line 388</i> */
		public static final int OFFLINE_MODE = 3;
	};
	/**
	 * <i>native declaration : line 396</i><br>
	 * enum values
	 */
	public static interface ServoControlLoop {
		/** <i>native declaration : line 397</i> */
		public static final int ServoPositionLoop = 0;
		/** <i>native declaration : line 398</i> */
		public static final int ServoVelocityLoop = 1;
		/** <i>native declaration : line 399</i> */
		public static final int ServoCurrentLoop = 2;
	};
	/**
	 * <i>native declaration : line 416</i><br>
	 * enum values
	 */
	public static interface ColorPort {
		/** <i>native declaration : line 417</i> */
		public static final int CL_PORT_GP1 = 0;
		/** <i>native declaration : line 418</i> */
		public static final int CL_PORT_GP2 = 1;
		/** <i>native declaration : line 419</i> */
		public static final int CL_PORT_GP4 = 2;
		/** <i>native declaration : line 420</i> */
		public static final int CL_PORT_GP5 = 3;
	};
	/**
	 * <i>native declaration : line 423</i><br>
	 * enum values
	 */
	public static interface InfraredPort {
		/** <i>native declaration : line 424</i> */
		public static final int IF_PORT_GP1 = 0;
		/** <i>native declaration : line 425</i> */
		public static final int IF_PORT_GP2 = 1;
		/** <i>native declaration : line 426</i> */
		public static final int IF_PORT_GP4 = 2;
		/** <i>native declaration : line 427</i> */
		public static final int IF_PORT_GP5 = 3;
	};
	/** enum values */
	public static interface UART4PeripheralsType {
		/** <i>native declaration : line 431</i> */
		public static final int UART4PeripheralsUART = 0;
		/** <i>native declaration : line 432</i> */
		public static final int UART4PeripheralsWIFI = 1;
		/** <i>native declaration : line 433</i> */
		public static final int UART4PeripheralsBLE = 2;
		/** <i>native declaration : line 434</i> */
		public static final int UART4PeripheralsCH375 = 3;
	};
	public static final int DobotConnect_NoError = 0;
	public static final int DobotConnect_NotFound = 1;
	public static final int DobotConnect_Occupied = 2;
	public static final int DobotCommunicate_NoError = 0;
	public static final int DobotCommunicate_BufferFull = 1;
	public static final int DobotCommunicate_Timeout = 2;
	public static final int DobotCommunicate_InvalidParams = 3;
	/**
	 * Original signature : <code>int DobotExec()</code><br>
	 * <i>native declaration : line 463</i>
	 */
	int DobotExec();
	/**
	 * Original signature : <code>int SearchDobot(char*, uint32_t)</code><br>
	 * <i>native declaration : line 465</i><br>
	 * @deprecated use the safer methods {@link #SearchDobot(String, int)} and {@link #SearchDobot(Pointer, int)} instead
	 */
	@Deprecated 
	int SearchDobot(Pointer dobotNameList, int maxLen);
	/**
	 * Original signature : <code>int SearchDobot(char*, uint32_t)</code><br>
	 * <i>native declaration : line 465</i>
	 */
	int SearchDobot(String dobotNameList, int maxLen);
	/**
	 * Original signature : <code>int ConnectDobot(const char*, uint32_t, char*, char*)</code><br>
	 * <i>native declaration : line 466</i><br>
	 * @deprecated use the safer methods {@link #ConnectDobot(String, int, String, String)} and {@link #ConnectDobot(Pointer, int, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int ConnectDobot(Pointer portName, int baudrate, Pointer fwType, Pointer version);
	/**
	 * Original signature : <code>int ConnectDobot(const char*, uint32_t, char*, char*)</code><br>
	 * <i>native declaration : line 466</i>
	 */
	int ConnectDobot(String portName, int baudrate, String fwType, String version);
	/**
	 * Original signature : <code>int DisconnectDobot()</code><br>
	 * <i>native declaration : line 467</i>
	 */
	int DisconnectDobot();
	/**
	 * Original signature : <code>int SetCmdTimeout(uint32_t)</code><br>
	 * <i>native declaration : line 469</i>
	 */
	int SetCmdTimeout(int cmdTimeout);
	/**
	 * Device information<br>
	 * Original signature : <code>int SetDeviceSN(const char*)</code><br>
	 * <i>native declaration : line 472</i><br>
	 * @deprecated use the safer methods {@link #SetDeviceSN(String)} and {@link #SetDeviceSN(Pointer)} instead
	 */
	@Deprecated 
	int SetDeviceSN(Pointer deviceSN);
	/**
	 * Device information<br>
	 * Original signature : <code>int SetDeviceSN(const char*)</code><br>
	 * <i>native declaration : line 472</i>
	 */
	int SetDeviceSN(String deviceSN);
	/**
	 * Original signature : <code>int GetDeviceSN(char*, uint32_t)</code><br>
	 * <i>native declaration : line 473</i><br>
	 * @deprecated use the safer methods {@link #GetDeviceSN(String, int)} and {@link #GetDeviceSN(Pointer, int)} instead
	 */
	@Deprecated 
	int GetDeviceSN(Pointer deviceSN, int maxLen);
	/**
	 * Original signature : <code>int GetDeviceSN(char*, uint32_t)</code><br>
	 * <i>native declaration : line 473</i>
	 */
	int GetDeviceSN(String deviceSN, int maxLen);
	/**
	 * Original signature : <code>int SetDeviceName(const char*)</code><br>
	 * <i>native declaration : line 475</i><br>
	 * @deprecated use the safer methods {@link #SetDeviceName(String)} and {@link #SetDeviceName(Pointer)} instead
	 */
	@Deprecated 
	int SetDeviceName(Pointer deviceName);
	/**
	 * Original signature : <code>int SetDeviceName(const char*)</code><br>
	 * <i>native declaration : line 475</i>
	 */
	int SetDeviceName(String deviceName);
	/**
	 * Original signature : <code>int GetDeviceName(char*, uint32_t)</code><br>
	 * <i>native declaration : line 476</i><br>
	 * @deprecated use the safer methods {@link #GetDeviceName(String, int)} and {@link #GetDeviceName(Pointer, int)} instead
	 */
	@Deprecated 
	int GetDeviceName(Pointer deviceName, int maxLen);
	/**
	 * Original signature : <code>int GetDeviceName(char*, uint32_t)</code><br>
	 * <i>native declaration : line 476</i>
	 */
	int GetDeviceName(String deviceName, int maxLen);
	/**
	 * Original signature : <code>int GetDeviceVersion(uint8_t*, uint8_t*, uint8_t*)</code><br>
	 * <i>native declaration : line 478</i><br>
	 * @deprecated use the safer methods {@link #GetDeviceVersion(ByteBuffer, ByteBuffer, ByteBuffer)} and {@link #GetDeviceVersion(Pointer, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int GetDeviceVersion(Pointer majorVersion, Pointer minorVersion, Pointer revision);
	/**
	 * Original signature : <code>int GetDeviceVersion(uint8_t*, uint8_t*, uint8_t*)</code><br>
	 * <i>native declaration : line 478</i>
	 */
	int GetDeviceVersion(ByteBuffer majorVersion, ByteBuffer minorVersion, ByteBuffer revision);
	/**
	 * Original signature : <code>int SetDeviceWithL(bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 480</i><br>
	 * @deprecated use the safer methods {@link #SetDeviceWithL(byte, byte, LongBuffer)} and {@link #SetDeviceWithL(byte, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetDeviceWithL(byte isWithL, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetDeviceWithL(bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 480</i>
	 */
	int SetDeviceWithL(byte isWithL, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetDeviceWithL(bool*)</code><br>
	 * <i>native declaration : line 481</i><br>
	 * @deprecated use the safer methods {@link #GetDeviceWithL(ByteBuffer)} and {@link #GetDeviceWithL(Pointer)} instead
	 */
	@Deprecated 
	int GetDeviceWithL(Pointer isWithL);
	/**
	 * Original signature : <code>int GetDeviceWithL(bool*)</code><br>
	 * <i>native declaration : line 481</i>
	 */
	int GetDeviceWithL(ByteBuffer isWithL);
	/**
	 * Original signature : <code>int GetDeviceTime(uint32_t*)</code><br>
	 * <i>native declaration : line 483</i><br>
	 * @deprecated use the safer methods {@link #GetDeviceTime(IntBuffer)} and {@link #GetDeviceTime(IntByReference)} instead
	 */
	@Deprecated 
	int GetDeviceTime(IntByReference deviceTime);
	/**
	 * Original signature : <code>int GetDeviceTime(uint32_t*)</code><br>
	 * <i>native declaration : line 483</i>
	 */
	int GetDeviceTime(IntBuffer deviceTime);
	/**
	 * Pose and Kinematics parameters are automatically get<br>
	 * Original signature : <code>int GetPose(Pose*)</code><br>
	 * <i>native declaration : line 486</i>
	 */
	int GetPose(Pose pose);
	/**
	 * Original signature : <code>int ResetPose(bool, float, float)</code><br>
	 * <i>native declaration : line 487</i>
	 */
	int ResetPose(byte manual, float rearArmAngle, float frontArmAngle);
	/**
	 * Original signature : <code>int GetKinematics(Kinematics*)</code><br>
	 * <i>native declaration : line 488</i>
	 */
	int GetKinematics(Kinematics kinematics);
	/**
	 * Original signature : <code>int GetPoseL(float*)</code><br>
	 * <i>native declaration : line 489</i><br>
	 * @deprecated use the safer methods {@link #GetPoseL(FloatBuffer)} and {@link #GetPoseL(FloatByReference)} instead
	 */
	@Deprecated 
	int GetPoseL(FloatByReference l);
	/**
	 * Original signature : <code>int GetPoseL(float*)</code><br>
	 * <i>native declaration : line 489</i>
	 */
	int GetPoseL(FloatBuffer l);
	/**
	 * Alarms<br>
	 * Original signature : <code>int GetAlarmsState(uint8_t*, uint32_t*, uint32_t)</code><br>
	 * <i>native declaration : line 492</i><br>
	 * @deprecated use the safer methods {@link #GetAlarmsState(ByteBuffer, IntBuffer, int)} and {@link #GetAlarmsState(Pointer, IntByReference, int)} instead
	 */
	@Deprecated 
	int GetAlarmsState(Pointer alarmsState, IntByReference len, int maxLen);
	/**
	 * Alarms<br>
	 * Original signature : <code>int GetAlarmsState(uint8_t*, uint32_t*, uint32_t)</code><br>
	 * <i>native declaration : line 492</i>
	 */
	int GetAlarmsState(ByteBuffer alarmsState, IntBuffer len, int maxLen);
	/**
	 * Original signature : <code>int ClearAllAlarmsState()</code><br>
	 * <i>native declaration : line 493</i>
	 */
	int ClearAllAlarmsState();
	/**
	 * HOME<br>
	 * Original signature : <code>int SetHOMEParams(HOMEParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 496</i><br>
	 * @deprecated use the safer methods {@link #SetHOMEParams(HOMEParams, byte, LongBuffer)} and {@link #SetHOMEParams(HOMEParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetHOMEParams(HOMEParams homeParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * HOME<br>
	 * Original signature : <code>int SetHOMEParams(HOMEParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 496</i>
	 */
	int SetHOMEParams(HOMEParams homeParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetHOMEParams(HOMEParams*)</code><br>
	 * <i>native declaration : line 497</i>
	 */
	int GetHOMEParams(HOMEParams homeParams);
	/**
	 * Original signature : <code>int SetHOMECmd(HOMECmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 499</i><br>
	 * @deprecated use the safer methods {@link #SetHOMECmd(HOMECmd, byte, LongBuffer)} and {@link #SetHOMECmd(HOMECmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetHOMECmd(HOMECmd homeCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetHOMECmd(HOMECmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 499</i>
	 */
	int SetHOMECmd(HOMECmd homeCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetAutoLevelingCmd(AutoLevelingCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 501</i><br>
	 * @deprecated use the safer methods {@link #SetAutoLevelingCmd(AutoLevelingCmd, byte, LongBuffer)} and {@link #SetAutoLevelingCmd(AutoLevelingCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetAutoLevelingCmd(AutoLevelingCmd autoLevelingCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetAutoLevelingCmd(AutoLevelingCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 501</i>
	 */
	int SetAutoLevelingCmd(AutoLevelingCmd autoLevelingCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetAutoLevelingResult(float*)</code><br>
	 * <i>native declaration : line 502</i><br>
	 * @deprecated use the safer methods {@link #GetAutoLevelingResult(FloatBuffer)} and {@link #GetAutoLevelingResult(FloatByReference)} instead
	 */
	@Deprecated 
	int GetAutoLevelingResult(FloatByReference precision);
	/**
	 * Original signature : <code>int GetAutoLevelingResult(float*)</code><br>
	 * <i>native declaration : line 502</i>
	 */
	int GetAutoLevelingResult(FloatBuffer precision);
	/**
	 * Handheld teach<br>
	 * Original signature : <code>int SetHHTTrigMode(HHTTrigMode)</code><br>
	 * <i>native declaration : line 505</i>
	 */
	int SetHHTTrigMode(int hhtTrigMode);
	/**
	 * Original signature : <code>int GetHHTTrigMode(HHTTrigMode*)</code><br>
	 * <i>native declaration : line 506</i><br>
	 * @deprecated use the safer methods {@link #GetHHTTrigMode(IntBuffer)} and {@link #GetHHTTrigMode(IntByReference)} instead
	 */
	@Deprecated 
	int GetHHTTrigMode(IntByReference hhtTrigMode);
	/**
	 * Original signature : <code>int GetHHTTrigMode(HHTTrigMode*)</code><br>
	 * <i>native declaration : line 506</i>
	 */
	int GetHHTTrigMode(IntBuffer hhtTrigMode);
	/**
	 * Original signature : <code>int SetHHTTrigOutputEnabled(bool)</code><br>
	 * <i>native declaration : line 508</i>
	 */
	int SetHHTTrigOutputEnabled(byte isEnabled);
	/**
	 * Original signature : <code>int GetHHTTrigOutputEnabled(bool*)</code><br>
	 * <i>native declaration : line 509</i><br>
	 * @deprecated use the safer methods {@link #GetHHTTrigOutputEnabled(ByteBuffer)} and {@link #GetHHTTrigOutputEnabled(Pointer)} instead
	 */
	@Deprecated 
	int GetHHTTrigOutputEnabled(Pointer isEnabled);
	/**
	 * Original signature : <code>int GetHHTTrigOutputEnabled(bool*)</code><br>
	 * <i>native declaration : line 509</i>
	 */
	int GetHHTTrigOutputEnabled(ByteBuffer isEnabled);
	/**
	 * Original signature : <code>int GetHHTTrigOutput(bool*)</code><br>
	 * <i>native declaration : line 511</i><br>
	 * @deprecated use the safer methods {@link #GetHHTTrigOutput(ByteBuffer)} and {@link #GetHHTTrigOutput(Pointer)} instead
	 */
	@Deprecated 
	int GetHHTTrigOutput(Pointer isTriggered);
	/**
	 * Original signature : <code>int GetHHTTrigOutput(bool*)</code><br>
	 * <i>native declaration : line 511</i>
	 */
	int GetHHTTrigOutput(ByteBuffer isTriggered);
	/**
	 * EndEffector<br>
	 * Original signature : <code>int SetEndEffectorParams(EndEffectorParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 514</i><br>
	 * @deprecated use the safer methods {@link #SetEndEffectorParams(dobotdll.EndEffectorParams, byte, LongBuffer)} and {@link #SetEndEffectorParams(dobotdll.EndEffectorParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetEndEffectorParams(EndEffectorParams endEffectorParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * EndEffector<br>
	 * Original signature : <code>int SetEndEffectorParams(EndEffectorParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 514</i>
	 */
	int SetEndEffectorParams(EndEffectorParams endEffectorParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetEndEffectorParams(EndEffectorParams*)</code><br>
	 * <i>native declaration : line 515</i>
	 */
	int GetEndEffectorParams(EndEffectorParams endEffectorParams);
	/**
	 * Original signature : <code>int SetEndEffectorLaser(bool, bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 517</i><br>
	 * @deprecated use the safer methods {@link #SetEndEffectorLaser(byte, byte, byte, LongBuffer)} and {@link #SetEndEffectorLaser(byte, byte, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetEndEffectorLaser(byte enableCtrl, byte on, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetEndEffectorLaser(bool, bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 517</i>
	 */
	int SetEndEffectorLaser(byte enableCtrl, byte on, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetEndEffectorLaser(bool*, bool*)</code><br>
	 * <i>native declaration : line 518</i><br>
	 * @deprecated use the safer methods {@link #GetEndEffectorLaser(ByteBuffer, ByteBuffer)} and {@link #GetEndEffectorLaser(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int GetEndEffectorLaser(Pointer isCtrlEnabled, Pointer isOn);
	/**
	 * Original signature : <code>int GetEndEffectorLaser(bool*, bool*)</code><br>
	 * <i>native declaration : line 518</i>
	 */
	int GetEndEffectorLaser(ByteBuffer isCtrlEnabled, ByteBuffer isOn);
	/**
	 * Original signature : <code>int SetEndEffectorSuctionCup(bool, bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 520</i><br>
	 * @deprecated use the safer methods {@link #SetEndEffectorSuctionCup(byte, byte, byte, LongBuffer)} and {@link #SetEndEffectorSuctionCup(byte, byte, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetEndEffectorSuctionCup(byte enableCtrl, byte suck, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetEndEffectorSuctionCup(bool, bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 520</i>
	 */
	int SetEndEffectorSuctionCup(byte enableCtrl, byte suck, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetEndEffectorSuctionCup(bool*, bool*)</code><br>
	 * <i>native declaration : line 521</i><br>
	 * @deprecated use the safer methods {@link #GetEndEffectorSuctionCup(ByteBuffer, ByteBuffer)} and {@link #GetEndEffectorSuctionCup(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int GetEndEffectorSuctionCup(Pointer isCtrlEnabled, Pointer isSucked);
	/**
	 * Original signature : <code>int GetEndEffectorSuctionCup(bool*, bool*)</code><br>
	 * <i>native declaration : line 521</i>
	 */
	int GetEndEffectorSuctionCup(ByteBuffer isCtrlEnabled, ByteBuffer isSucked);
	/**
	 * Original signature : <code>int SetEndEffectorGripper(bool, bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 523</i><br>
	 * @deprecated use the safer methods {@link #SetEndEffectorGripper(byte, byte, byte, LongBuffer)} and {@link #SetEndEffectorGripper(byte, byte, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetEndEffectorGripper(byte enableCtrl, byte grip, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetEndEffectorGripper(bool, bool, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 523</i>
	 */
	int SetEndEffectorGripper(byte enableCtrl, byte grip, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetEndEffectorGripper(bool*, bool*)</code><br>
	 * <i>native declaration : line 524</i><br>
	 * @deprecated use the safer methods {@link #GetEndEffectorGripper(ByteBuffer, ByteBuffer)} and {@link #GetEndEffectorGripper(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int GetEndEffectorGripper(Pointer isCtrlEnabled, Pointer isGripped);
	/**
	 * Original signature : <code>int GetEndEffectorGripper(bool*, bool*)</code><br>
	 * <i>native declaration : line 524</i>
	 */
	int GetEndEffectorGripper(ByteBuffer isCtrlEnabled, ByteBuffer isGripped);
	/**
	 * Arm orientation<br>
	 * Original signature : <code>int SetArmOrientation(ArmOrientation, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 527</i><br>
	 * @deprecated use the safer methods {@link #SetArmOrientation(int, byte, LongBuffer)} and {@link #SetArmOrientation(int, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetArmOrientation(int armOrientation, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Arm orientation<br>
	 * Original signature : <code>int SetArmOrientation(ArmOrientation, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 527</i>
	 */
	int SetArmOrientation(int armOrientation, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetArmOrientation(ArmOrientation*)</code><br>
	 * <i>native declaration : line 528</i><br>
	 * @deprecated use the safer methods {@link #GetArmOrientation(IntBuffer)} and {@link #GetArmOrientation(IntByReference)} instead
	 */
	@Deprecated 
	int GetArmOrientation(IntByReference armOrientation);
	/**
	 * Original signature : <code>int GetArmOrientation(ArmOrientation*)</code><br>
	 * <i>native declaration : line 528</i>
	 */
	int GetArmOrientation(IntBuffer armOrientation);
	/**
	 * JOG functions<br>
	 * Original signature : <code>int SetJOGJointParams(JOGJointParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 531</i><br>
	 * @deprecated use the safer methods {@link #SetJOGJointParams(JOGJointParams, byte, LongBuffer)} and {@link #SetJOGJointParams(JOGJointParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetJOGJointParams(JOGJointParams jointJogParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * JOG functions<br>
	 * Original signature : <code>int SetJOGJointParams(JOGJointParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 531</i>
	 */
	int SetJOGJointParams(JOGJointParams jointJogParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetJOGJointParams(JOGJointParams*)</code><br>
	 * <i>native declaration : line 532</i>
	 */
	int GetJOGJointParams(JOGJointParams jointJogParams);
	/**
	 * Original signature : <code>int SetJOGCoordinateParams(JOGCoordinateParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 534</i><br>
	 * @deprecated use the safer methods {@link #SetJOGCoordinateParams(dobotdll.JOGCoordinateParams, byte, LongBuffer)} and {@link #SetJOGCoordinateParams(dobotdll.JOGCoordinateParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetJOGCoordinateParams(JOGCoordinateParams coordinateJogParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetJOGCoordinateParams(JOGCoordinateParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 534</i>
	 */
	int SetJOGCoordinateParams(JOGCoordinateParams coordinateJogParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetJOGCoordinateParams(JOGCoordinateParams*)</code><br>
	 * <i>native declaration : line 535</i>
	 */
	int GetJOGCoordinateParams(JOGCoordinateParams coordinateJogParams);
	/**
	 * Original signature : <code>int SetJOGLParams(JOGLParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 537</i><br>
	 * @deprecated use the safer methods {@link #SetJOGLParams(JOGLParams, byte, LongBuffer)} and {@link #SetJOGLParams(JOGLParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetJOGLParams(JOGLParams jogLParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetJOGLParams(JOGLParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 537</i>
	 */
	int SetJOGLParams(JOGLParams jogLParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetJOGLParams(JOGLParams*)</code><br>
	 * <i>native declaration : line 538</i>
	 */
	int GetJOGLParams(JOGLParams jogLParams);
	/**
	 * Original signature : <code>int SetJOGCommonParams(JOGCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 540</i><br>
	 * @deprecated use the safer methods {@link #SetJOGCommonParams(dobotdll.JOGCommonParams, byte, LongBuffer)} and {@link #SetJOGCommonParams(dobotdll.JOGCommonParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetJOGCommonParams(JOGCommonParams jogCommonParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetJOGCommonParams(JOGCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 540</i>
	 */
	int SetJOGCommonParams(JOGCommonParams jogCommonParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetJOGCommonParams(JOGCommonParams*)</code><br>
	 * <i>native declaration : line 541</i>
	 */
	int GetJOGCommonParams(JOGCommonParams jogCommonParams);
	/**
	 * Original signature : <code>int SetJOGCmd(JOGCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 542</i><br>
	 * @deprecated use the safer methods {@link #SetJOGCmd(JOGCmd, byte, LongBuffer)} and {@link #SetJOGCmd(JOGCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetJOGCmd(JOGCmd jogCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetJOGCmd(JOGCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 542</i>
	 */
	int SetJOGCmd(JOGCmd jogCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * PTP functions<br>
	 * Original signature : <code>int SetPTPJointParams(PTPJointParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 545</i><br>
	 * @deprecated use the safer methods {@link #SetPTPJointParams(PTPJointParams, byte, LongBuffer)} and {@link #SetPTPJointParams(PTPJointParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPJointParams(PTPJointParams ptpJointParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * PTP functions<br>
	 * Original signature : <code>int SetPTPJointParams(PTPJointParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 545</i>
	 */
	int SetPTPJointParams(PTPJointParams ptpJointParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetPTPJointParams(PTPJointParams*)</code><br>
	 * <i>native declaration : line 546</i>
	 */
	int GetPTPJointParams(PTPJointParams ptpJointParams);
	/**
	 * Original signature : <code>int SetPTPCoordinateParams(PTPCoordinateParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 547</i><br>
	 * @deprecated use the safer methods {@link #SetPTPCoordinateParams(dobotdll.PTPCoordinateParams, byte, LongBuffer)} and {@link #SetPTPCoordinateParams(dobotdll.PTPCoordinateParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPCoordinateParams(PTPCoordinateParams ptpCoordinateParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPCoordinateParams(PTPCoordinateParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 547</i>
	 */
	int SetPTPCoordinateParams(PTPCoordinateParams ptpCoordinateParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetPTPCoordinateParams(PTPCoordinateParams*)</code><br>
	 * <i>native declaration : line 548</i>
	 */
	int GetPTPCoordinateParams(PTPCoordinateParams ptpCoordinateParams);
	/**
	 * Original signature : <code>int SetPTPLParams(PTPLParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 549</i><br>
	 * @deprecated use the safer methods {@link #SetPTPLParams(PTPLParams, byte, LongBuffer)} and {@link #SetPTPLParams(PTPLParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPLParams(PTPLParams ptpLParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPLParams(PTPLParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 549</i>
	 */
	int SetPTPLParams(PTPLParams ptpLParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetPTPLParams(PTPLParams*)</code><br>
	 * <i>native declaration : line 550</i>
	 */
	int GetPTPLParams(PTPLParams ptpLParams);
	/**
	 * Original signature : <code>int SetPTPJumpParams(PTPJumpParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 552</i><br>
	 * @deprecated use the safer methods {@link #SetPTPJumpParams(PTPJumpParams, byte, LongBuffer)} and {@link #SetPTPJumpParams(PTPJumpParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPJumpParams(PTPJumpParams ptpJumpParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPJumpParams(PTPJumpParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 552</i>
	 */
	int SetPTPJumpParams(PTPJumpParams ptpJumpParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetPTPJumpParams(PTPJumpParams*)</code><br>
	 * <i>native declaration : line 553</i>
	 */
	int GetPTPJumpParams(PTPJumpParams ptpJumpParams);
	/**
	 * Original signature : <code>int SetPTPCommonParams(PTPCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 554</i><br>
	 * @deprecated use the safer methods {@link #SetPTPCommonParams(dobotdll.PTPCommonParams, byte, LongBuffer)} and {@link #SetPTPCommonParams(dobotdll.PTPCommonParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPCommonParams(PTPCommonParams ptpCommonParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPCommonParams(PTPCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 554</i>
	 */
	int SetPTPCommonParams(PTPCommonParams ptpCommonParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetPTPCommonParams(PTPCommonParams*)</code><br>
	 * <i>native declaration : line 555</i>
	 */
	int GetPTPCommonParams(PTPCommonParams ptpCommonParams);
	/**
	 * Original signature : <code>int SetPTPCmd(PTPCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 557</i><br>
	 * @deprecated use the safer methods {@link #SetPTPCmd(PTPCmd, byte, LongBuffer)} and {@link #SetPTPCmd(PTPCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPCmd(PTPCmd ptpCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPCmd(PTPCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 557</i>
	 */
	int SetPTPCmd(PTPCmd ptpCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPWithLCmd(PTPWithLCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 558</i><br>
	 * @deprecated use the safer methods {@link #SetPTPWithLCmd(PTPWithLCmd, byte, LongBuffer)} and {@link #SetPTPWithLCmd(PTPWithLCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPWithLCmd(PTPWithLCmd ptpWithLCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPWithLCmd(PTPWithLCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 558</i>
	 */
	int SetPTPWithLCmd(PTPWithLCmd ptpWithLCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPJump2Params(PTPJump2Params*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 560</i><br>
	 * @deprecated use the safer methods {@link #SetPTPJump2Params(PTPJump2Params, byte, LongBuffer)} and {@link #SetPTPJump2Params(PTPJump2Params, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPJump2Params(PTPJump2Params ptpJump2Params, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPJump2Params(PTPJump2Params*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 560</i>
	 */
	int SetPTPJump2Params(PTPJump2Params ptpJump2Params, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetPTPJump2Params(PTPJump2Params*)</code><br>
	 * <i>native declaration : line 561</i>
	 */
	int GetPTPJump2Params(PTPJump2Params ptpJump2Params);
	/**
	 * Original signature : <code>int SetPTPPOCmd(PTPCmd*, ParallelOutputCmd*, int, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 563</i><br>
	 * @deprecated use the safer methods {@link #SetPTPPOCmd(PTPCmd, dobotdll.ParallelOutputCmd, int, byte, LongBuffer)} and {@link #SetPTPPOCmd(PTPCmd, dobotdll.ParallelOutputCmd, int, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPPOCmd(PTPCmd ptpCmd, ParallelOutputCmd parallelCmd, int parallelCmdCount, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPPOCmd(PTPCmd*, ParallelOutputCmd*, int, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 563</i>
	 */
	int SetPTPPOCmd(PTPCmd ptpCmd, ParallelOutputCmd parallelCmd, int parallelCmdCount, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPPOWithLCmd(PTPWithLCmd*, ParallelOutputCmd*, int, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 564</i><br>
	 * @deprecated use the safer methods {@link #SetPTPPOWithLCmd(PTPWithLCmd, dobotdll.ParallelOutputCmd, int, byte, LongBuffer)} and {@link #SetPTPPOWithLCmd(PTPWithLCmd, dobotdll.ParallelOutputCmd, int, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetPTPPOWithLCmd(PTPWithLCmd ptpWithLCmd, ParallelOutputCmd parallelCmd, int parallelCmdCount, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetPTPPOWithLCmd(PTPWithLCmd*, ParallelOutputCmd*, int, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 564</i>
	 */
	int SetPTPPOWithLCmd(PTPWithLCmd ptpWithLCmd, ParallelOutputCmd parallelCmd, int parallelCmdCount, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * CP functions<br>
	 * Original signature : <code>int SetCPParams(CPParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 567</i><br>
	 * @deprecated use the safer methods {@link #SetCPParams(CPParams, byte, LongBuffer)} and {@link #SetCPParams(CPParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetCPParams(CPParams cpParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * CP functions<br>
	 * Original signature : <code>int SetCPParams(CPParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 567</i>
	 */
	int SetCPParams(CPParams cpParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetCPParams(CPParams*)</code><br>
	 * <i>native declaration : line 568</i>
	 */
	int GetCPParams(CPParams cpParams);
	/**
	 * Original signature : <code>int SetCPCmd(CPCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 569</i><br>
	 * @deprecated use the safer methods {@link #SetCPCmd(CPCmd, byte, LongBuffer)} and {@link #SetCPCmd(CPCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetCPCmd(CPCmd cpCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCPCmd(CPCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 569</i>
	 */
	int SetCPCmd(CPCmd cpCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCPLECmd(CPCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 570</i><br>
	 * @deprecated use the safer methods {@link #SetCPLECmd(CPCmd, byte, LongBuffer)} and {@link #SetCPLECmd(CPCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetCPLECmd(CPCmd cpCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCPLECmd(CPCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 570</i>
	 */
	int SetCPLECmd(CPCmd cpCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCPRHoldEnable(bool)</code><br>
	 * <i>native declaration : line 571</i>
	 */
	int SetCPRHoldEnable(byte isEnable);
	/**
	 * Original signature : <code>int GetCPRHoldEnable(bool*)</code><br>
	 * <i>native declaration : line 572</i><br>
	 * @deprecated use the safer methods {@link #GetCPRHoldEnable(ByteBuffer)} and {@link #GetCPRHoldEnable(Pointer)} instead
	 */
	@Deprecated 
	int GetCPRHoldEnable(Pointer isEnable);
	/**
	 * Original signature : <code>int GetCPRHoldEnable(bool*)</code><br>
	 * <i>native declaration : line 572</i>
	 */
	int GetCPRHoldEnable(ByteBuffer isEnable);
	/**
	 * Original signature : <code>int SetCPCommonParams(CPCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 573</i><br>
	 * @deprecated use the safer methods {@link #SetCPCommonParams(CPCommonParams, byte, LongBuffer)} and {@link #SetCPCommonParams(CPCommonParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetCPCommonParams(CPCommonParams cpCommonParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCPCommonParams(CPCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 573</i>
	 */
	int SetCPCommonParams(CPCommonParams cpCommonParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetCPCommonParams(CPCommonParams*)</code><br>
	 * <i>native declaration : line 574</i>
	 */
	int GetCPCommonParams(CPCommonParams cpCommonParams);
	/**
	 * ARC<br>
	 * Original signature : <code>int SetARCParams(ARCParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 577</i><br>
	 * @deprecated use the safer methods {@link #SetARCParams(ARCParams, byte, LongBuffer)} and {@link #SetARCParams(ARCParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetARCParams(ARCParams arcParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * ARC<br>
	 * Original signature : <code>int SetARCParams(ARCParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 577</i>
	 */
	int SetARCParams(ARCParams arcParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetARCParams(ARCParams*)</code><br>
	 * <i>native declaration : line 578</i>
	 */
	int GetARCParams(ARCParams arcParams);
	/**
	 * Original signature : <code>int SetARCCmd(ARCCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 579</i><br>
	 * @deprecated use the safer methods {@link #SetARCCmd(ARCCmd, byte, LongBuffer)} and {@link #SetARCCmd(ARCCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetARCCmd(ARCCmd arcCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetARCCmd(ARCCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 579</i>
	 */
	int SetARCCmd(ARCCmd arcCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCircleCmd(CircleCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 580</i><br>
	 * @deprecated use the safer methods {@link #SetCircleCmd(CircleCmd, byte, LongBuffer)} and {@link #SetCircleCmd(CircleCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetCircleCmd(CircleCmd circleCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetCircleCmd(CircleCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 580</i>
	 */
	int SetCircleCmd(CircleCmd circleCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetARCCommonParams(ARCCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 581</i><br>
	 * @deprecated use the safer methods {@link #SetARCCommonParams(ARCCommonParams, byte, LongBuffer)} and {@link #SetARCCommonParams(ARCCommonParams, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetARCCommonParams(ARCCommonParams arcCommonParams, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetARCCommonParams(ARCCommonParams*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 581</i>
	 */
	int SetARCCommonParams(ARCCommonParams arcCommonParams, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetARCCommonParams(ARCCommonParams*)</code><br>
	 * <i>native declaration : line 582</i>
	 */
	int GetARCCommonParams(ARCCommonParams arcCommonParams);
	/**
	 * WAIT<br>
	 * Original signature : <code>int SetWAITCmd(WAITCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 585</i><br>
	 * @deprecated use the safer methods {@link #SetWAITCmd(WAITCmd, byte, LongBuffer)} and {@link #SetWAITCmd(WAITCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetWAITCmd(WAITCmd waitCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * WAIT<br>
	 * Original signature : <code>int SetWAITCmd(WAITCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 585</i>
	 */
	int SetWAITCmd(WAITCmd waitCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * TRIG<br>
	 * Original signature : <code>int SetTRIGCmd(TRIGCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 588</i><br>
	 * @deprecated use the safer methods {@link #SetTRIGCmd(TRIGCmd, byte, LongBuffer)} and {@link #SetTRIGCmd(TRIGCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetTRIGCmd(TRIGCmd trigCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * TRIG<br>
	 * Original signature : <code>int SetTRIGCmd(TRIGCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 588</i>
	 */
	int SetTRIGCmd(TRIGCmd trigCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * EIO<br>
	 * Original signature : <code>int SetIOMultiplexing(IOMultiplexing*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 591</i><br>
	 * @deprecated use the safer methods {@link #SetIOMultiplexing(IOMultiplexing, byte, LongBuffer)} and {@link #SetIOMultiplexing(IOMultiplexing, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetIOMultiplexing(IOMultiplexing ioMultiplexing, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * EIO<br>
	 * Original signature : <code>int SetIOMultiplexing(IOMultiplexing*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 591</i>
	 */
	int SetIOMultiplexing(IOMultiplexing ioMultiplexing, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetIOMultiplexing(IOMultiplexing*)</code><br>
	 * <i>native declaration : line 592</i>
	 */
	int GetIOMultiplexing(IOMultiplexing ioMultiplexing);
	/**
	 * Original signature : <code>int SetIODO(IODO*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 594</i><br>
	 * @deprecated use the safer methods {@link #SetIODO(IODO, byte, LongBuffer)} and {@link #SetIODO(IODO, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetIODO(IODO ioDO, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetIODO(IODO*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 594</i>
	 */
	int SetIODO(IODO ioDO, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetIODO(IODO*)</code><br>
	 * <i>native declaration : line 595</i>
	 */
	int GetIODO(IODO ioDO);
	/**
	 * Original signature : <code>int SetIOPWM(IOPWM*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 597</i><br>
	 * @deprecated use the safer methods {@link #SetIOPWM(IOPWM, byte, LongBuffer)} and {@link #SetIOPWM(IOPWM, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetIOPWM(IOPWM ioPWM, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetIOPWM(IOPWM*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 597</i>
	 */
	int SetIOPWM(IOPWM ioPWM, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetIOPWM(IOPWM*)</code><br>
	 * <i>native declaration : line 598</i>
	 */
	int GetIOPWM(IOPWM ioPWM);
	/**
	 * Original signature : <code>int GetIODI(IODI*)</code><br>
	 * <i>native declaration : line 600</i>
	 */
	int GetIODI(IODI ioDI);
	/**
	 * Original signature : <code>int GetIOADC(IOADC*)</code><br>
	 * <i>native declaration : line 601</i>
	 */
	int GetIOADC(IOADC ioADC);
	/**
	 * Original signature : <code>int SetEMotor(EMotor*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 603</i><br>
	 * @deprecated use the safer methods {@link #SetEMotor(EMotor, byte, LongBuffer)} and {@link #SetEMotor(EMotor, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetEMotor(EMotor eMotor, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetEMotor(EMotor*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 603</i>
	 */
	int SetEMotor(EMotor eMotor, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetEMotorS(EMotorS*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 604</i><br>
	 * @deprecated use the safer methods {@link #SetEMotorS(EMotorS, byte, LongBuffer)} and {@link #SetEMotorS(EMotorS, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetEMotorS(EMotorS eMotorS, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetEMotorS(EMotorS*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 604</i>
	 */
	int SetEMotorS(EMotorS eMotorS, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetColorSensor(bool, ColorPort)</code><br>
	 * <i>native declaration : line 606</i>
	 */
	int SetColorSensor(byte enable, int colorPort);
	/**
	 * Original signature : <code>int GetColorSensor(uint8_t*, uint8_t*, uint8_t*)</code><br>
	 * <i>native declaration : line 607</i><br>
	 * @deprecated use the safer methods {@link #GetColorSensor(ByteBuffer, ByteBuffer, ByteBuffer)} and {@link #GetColorSensor(Pointer, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int GetColorSensor(Pointer r, Pointer g, Pointer b);
	/**
	 * Original signature : <code>int GetColorSensor(uint8_t*, uint8_t*, uint8_t*)</code><br>
	 * <i>native declaration : line 607</i>
	 */
	int GetColorSensor(ByteBuffer r, ByteBuffer g, ByteBuffer b);
	/**
	 * Original signature : <code>int SetInfraredSensor(bool, InfraredPort)</code><br>
	 * <i>native declaration : line 609</i>
	 */
	int SetInfraredSensor(byte enable, int infraredPort);
	/**
	 * Original signature : <code>int GetInfraredSensor(InfraredPort, uint8_t*)</code><br>
	 * <i>native declaration : line 610</i><br>
	 * @deprecated use the safer methods {@link #GetInfraredSensor(int, ByteBuffer)} and {@link #GetInfraredSensor(int, Pointer)} instead
	 */
	@Deprecated 
	int GetInfraredSensor(int port, Pointer value);
	/**
	 * Original signature : <code>int GetInfraredSensor(InfraredPort, uint8_t*)</code><br>
	 * <i>native declaration : line 610</i>
	 */
	int GetInfraredSensor(int port, ByteBuffer value);
	/**
	 * CAL<br>
	 * Original signature : <code>int SetAngleSensorStaticError(float, float)</code><br>
	 * <i>native declaration : line 613</i>
	 */
	int SetAngleSensorStaticError(float rearArmAngleError, float frontArmAngleError);
	/**
	 * Original signature : <code>int GetAngleSensorStaticError(float*, float*)</code><br>
	 * <i>native declaration : line 614</i><br>
	 * @deprecated use the safer methods {@link #GetAngleSensorStaticError(FloatBuffer, FloatBuffer)} and {@link #GetAngleSensorStaticError(FloatByReference, FloatByReference)} instead
	 */
	@Deprecated 
	int GetAngleSensorStaticError(FloatByReference rearArmAngleError, FloatByReference frontArmAngleError);
	/**
	 * Original signature : <code>int GetAngleSensorStaticError(float*, float*)</code><br>
	 * <i>native declaration : line 614</i>
	 */
	int GetAngleSensorStaticError(FloatBuffer rearArmAngleError, FloatBuffer frontArmAngleError);
	/**
	 * Original signature : <code>int SetAngleSensorCoef(float, float)</code><br>
	 * <i>native declaration : line 615</i>
	 */
	int SetAngleSensorCoef(float rearArmAngleCoef, float frontArmAngleCoef);
	/**
	 * Original signature : <code>int GetAngleSensorCoef(float*, float*)</code><br>
	 * <i>native declaration : line 616</i><br>
	 * @deprecated use the safer methods {@link #GetAngleSensorCoef(FloatBuffer, FloatBuffer)} and {@link #GetAngleSensorCoef(FloatByReference, FloatByReference)} instead
	 */
	@Deprecated 
	int GetAngleSensorCoef(FloatByReference rearArmAngleCoef, FloatByReference frontArmAngleCoef);
	/**
	 * Original signature : <code>int GetAngleSensorCoef(float*, float*)</code><br>
	 * <i>native declaration : line 616</i>
	 */
	int GetAngleSensorCoef(FloatBuffer rearArmAngleCoef, FloatBuffer frontArmAngleCoef);
	/**
	 * Original signature : <code>int SetBaseDecoderStaticError(float)</code><br>
	 * <i>native declaration : line 618</i>
	 */
	int SetBaseDecoderStaticError(float baseDecoderError);
	/**
	 * Original signature : <code>int GetBaseDecoderStaticError(float*)</code><br>
	 * <i>native declaration : line 619</i><br>
	 * @deprecated use the safer methods {@link #GetBaseDecoderStaticError(FloatBuffer)} and {@link #GetBaseDecoderStaticError(FloatByReference)} instead
	 */
	@Deprecated 
	int GetBaseDecoderStaticError(FloatByReference baseDecoderError);
	/**
	 * Original signature : <code>int GetBaseDecoderStaticError(float*)</code><br>
	 * <i>native declaration : line 619</i>
	 */
	int GetBaseDecoderStaticError(FloatBuffer baseDecoderError);
	/**
	 * Original signature : <code>int SetLRHandCalibrateValue(float)</code><br>
	 * <i>native declaration : line 621</i>
	 */
	int SetLRHandCalibrateValue(float lrHandCalibrateValue);
	/**
	 * Original signature : <code>int GetLRHandCalibrateValue(float*)</code><br>
	 * <i>native declaration : line 622</i><br>
	 * @deprecated use the safer methods {@link #GetLRHandCalibrateValue(FloatBuffer)} and {@link #GetLRHandCalibrateValue(FloatByReference)} instead
	 */
	@Deprecated 
	int GetLRHandCalibrateValue(FloatByReference lrHandCalibrateValue);
	/**
	 * Original signature : <code>int GetLRHandCalibrateValue(float*)</code><br>
	 * <i>native declaration : line 622</i>
	 */
	int GetLRHandCalibrateValue(FloatBuffer lrHandCalibrateValue);
	/**
	 * WIFI<br>
	 * Original signature : <code>int SetWIFIConfigMode(bool)</code><br>
	 * <i>native declaration : line 625</i>
	 */
	int SetWIFIConfigMode(byte enable);
	/**
	 * Original signature : <code>int GetWIFIConfigMode(bool*)</code><br>
	 * <i>native declaration : line 626</i><br>
	 * @deprecated use the safer methods {@link #GetWIFIConfigMode(ByteBuffer)} and {@link #GetWIFIConfigMode(Pointer)} instead
	 */
	@Deprecated 
	int GetWIFIConfigMode(Pointer isEnabled);
	/**
	 * Original signature : <code>int GetWIFIConfigMode(bool*)</code><br>
	 * <i>native declaration : line 626</i>
	 */
	int GetWIFIConfigMode(ByteBuffer isEnabled);
	/**
	 * Original signature : <code>int SetWIFISSID(const char*)</code><br>
	 * <i>native declaration : line 627</i><br>
	 * @deprecated use the safer methods {@link #SetWIFISSID(String)} and {@link #SetWIFISSID(Pointer)} instead
	 */
	@Deprecated 
	int SetWIFISSID(Pointer ssid);
	/**
	 * Original signature : <code>int SetWIFISSID(const char*)</code><br>
	 * <i>native declaration : line 627</i>
	 */
	int SetWIFISSID(String ssid);
	/**
	 * Original signature : <code>int GetWIFISSID(char*, uint32_t)</code><br>
	 * <i>native declaration : line 628</i><br>
	 * @deprecated use the safer methods {@link #GetWIFISSID(String, int)} and {@link #GetWIFISSID(Pointer, int)} instead
	 */
	@Deprecated 
	int GetWIFISSID(Pointer ssid, int maxLen);
	/**
	 * Original signature : <code>int GetWIFISSID(char*, uint32_t)</code><br>
	 * <i>native declaration : line 628</i>
	 */
	int GetWIFISSID(String ssid, int maxLen);
	/**
	 * Original signature : <code>int SetWIFIPassword(const char*)</code><br>
	 * <i>native declaration : line 629</i><br>
	 * @deprecated use the safer methods {@link #SetWIFIPassword(String)} and {@link #SetWIFIPassword(Pointer)} instead
	 */
	@Deprecated 
	int SetWIFIPassword(Pointer password);
	/**
	 * Original signature : <code>int SetWIFIPassword(const char*)</code><br>
	 * <i>native declaration : line 629</i>
	 */
	int SetWIFIPassword(String password);
	/**
	 * Original signature : <code>int GetWIFIPassword(char*, uint32_t)</code><br>
	 * <i>native declaration : line 630</i><br>
	 * @deprecated use the safer methods {@link #GetWIFIPassword(String, int)} and {@link #GetWIFIPassword(Pointer, int)} instead
	 */
	@Deprecated 
	int GetWIFIPassword(Pointer password, int maxLen);
	/**
	 * Original signature : <code>int GetWIFIPassword(char*, uint32_t)</code><br>
	 * <i>native declaration : line 630</i>
	 */
	int GetWIFIPassword(String password, int maxLen);
	/**
	 * Original signature : <code>int SetWIFIIPAddress(WIFIIPAddress*)</code><br>
	 * <i>native declaration : line 631</i>
	 */
	int SetWIFIIPAddress(WIFIIPAddress wifiIPAddress);
	/**
	 * Original signature : <code>int GetWIFIIPAddress(WIFIIPAddress*)</code><br>
	 * <i>native declaration : line 632</i>
	 */
	int GetWIFIIPAddress(WIFIIPAddress wifiIPAddress);
	/**
	 * Original signature : <code>int SetWIFINetmask(WIFINetmask*)</code><br>
	 * <i>native declaration : line 633</i>
	 */
	int SetWIFINetmask(WIFINetmask wifiNetmask);
	/**
	 * Original signature : <code>int GetWIFINetmask(WIFINetmask*)</code><br>
	 * <i>native declaration : line 634</i>
	 */
	int GetWIFINetmask(WIFINetmask wifiNetmask);
	/**
	 * Original signature : <code>int SetWIFIGateway(WIFIGateway*)</code><br>
	 * <i>native declaration : line 635</i>
	 */
	int SetWIFIGateway(WIFIGateway wifiGateway);
	/**
	 * Original signature : <code>int GetWIFIGateway(WIFIGateway*)</code><br>
	 * <i>native declaration : line 636</i>
	 */
	int GetWIFIGateway(WIFIGateway wifiGateway);
	/**
	 * Original signature : <code>int SetWIFIDNS(WIFIDNS*)</code><br>
	 * <i>native declaration : line 637</i>
	 */
	int SetWIFIDNS(WIFIDNS wifiDNS);
	/**
	 * Original signature : <code>int GetWIFIDNS(WIFIDNS*)</code><br>
	 * <i>native declaration : line 638</i>
	 */
	int GetWIFIDNS(WIFIDNS wifiDNS);
	/**
	 * Original signature : <code>int GetWIFIConnectStatus(bool*)</code><br>
	 * <i>native declaration : line 639</i><br>
	 * @deprecated use the safer methods {@link #GetWIFIConnectStatus(ByteBuffer)} and {@link #GetWIFIConnectStatus(Pointer)} instead
	 */
	@Deprecated 
	int GetWIFIConnectStatus(Pointer isConnected);
	/**
	 * Original signature : <code>int GetWIFIConnectStatus(bool*)</code><br>
	 * <i>native declaration : line 639</i>
	 */
	int GetWIFIConnectStatus(ByteBuffer isConnected);
	/**
	 * FIRMWARE<br>
	 * Original signature : <code>int UpdateFirmware(FirmwareParams*)</code><br>
	 * <i>native declaration : line 642</i>
	 */
	int UpdateFirmware(FirmwareParams firmwareParams);
	/**
	 * Original signature : <code>int SetFirmwareMode(FirmwareMode*)</code><br>
	 * <i>native declaration : line 643</i>
	 */
	int SetFirmwareMode(FirmwareMode firmwareMode);
	/**
	 * Original signature : <code>int GetFirmwareMode(FirmwareMode*)</code><br>
	 * <i>native declaration : line 644</i>
	 */
	int GetFirmwareMode(FirmwareMode firmwareMode);
	/**
	 * LOSTSTEP<br>
	 * Original signature : <code>int SetLostStepParams(float, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 647</i><br>
	 * @deprecated use the safer methods {@link #SetLostStepParams(float, byte, LongBuffer)} and {@link #SetLostStepParams(float, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetLostStepParams(float threshold, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * LOSTSTEP<br>
	 * Original signature : <code>int SetLostStepParams(float, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 647</i>
	 */
	int SetLostStepParams(float threshold, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SetLostStepCmd(bool, uint64_t*)</code><br>
	 * <i>native declaration : line 648</i><br>
	 * @deprecated use the safer methods {@link #SetLostStepCmd(byte, LongBuffer)} and {@link #SetLostStepCmd(byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetLostStepCmd(byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetLostStepCmd(bool, uint64_t*)</code><br>
	 * <i>native declaration : line 648</i>
	 */
	int SetLostStepCmd(byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * UART4 Peripherals<br>
	 * Original signature : <code>int GetUART4PeripheralsType(uint8_t*)</code><br>
	 * <i>native declaration : line 651</i><br>
	 * @deprecated use the safer methods {@link #GetUART4PeripheralsType(ByteBuffer)} and {@link #GetUART4PeripheralsType(Pointer)} instead
	 */
	@Deprecated 
	int GetUART4PeripheralsType(Pointer type);
	/**
	 * UART4 Peripherals<br>
	 * Original signature : <code>int GetUART4PeripheralsType(uint8_t*)</code><br>
	 * <i>native declaration : line 651</i>
	 */
	int GetUART4PeripheralsType(ByteBuffer type);
	/**
	 * Original signature : <code>int SetUART4PeripheralsEnable(bool)</code><br>
	 * <i>native declaration : line 652</i>
	 */
	int SetUART4PeripheralsEnable(byte isEnable);
	/**
	 * Original signature : <code>int GetUART4PeripheralsEnable(bool*)</code><br>
	 * <i>native declaration : line 653</i><br>
	 * @deprecated use the safer methods {@link #GetUART4PeripheralsEnable(ByteBuffer)} and {@link #GetUART4PeripheralsEnable(Pointer)} instead
	 */
	@Deprecated 
	int GetUART4PeripheralsEnable(Pointer isEnable);
	/**
	 * Original signature : <code>int GetUART4PeripheralsEnable(bool*)</code><br>
	 * <i>native declaration : line 653</i>
	 */
	int GetUART4PeripheralsEnable(ByteBuffer isEnable);
	/**
	 * Function Pluse Mode<br>
	 * Original signature : <code>int SendPluse(PluseCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 656</i><br>
	 * @deprecated use the safer methods {@link #SendPluse(PluseCmd, byte, LongBuffer)} and {@link #SendPluse(PluseCmd, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SendPluse(PluseCmd pluseCmd, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Function Pluse Mode<br>
	 * Original signature : <code>int SendPluse(PluseCmd*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 656</i>
	 */
	int SendPluse(PluseCmd pluseCmd, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SendPluseEx(PluseCmd*)</code><br>
	 * <i>native declaration : line 657</i>
	 */
	int SendPluseEx(PluseCmd pluseCmd);
	/**
	 * TEST<br>
	 * Original signature : <code>int GetUserParams(UserParams*)</code><br>
	 * <i>native declaration : line 660</i>
	 */
	int GetUserParams(UserParams userParams);
	/**
	 * Original signature : <code>int GetPTPTime(PTPCmd*, uint32_t*)</code><br>
	 * <i>native declaration : line 661</i><br>
	 * @deprecated use the safer methods {@link #GetPTPTime(PTPCmd, IntBuffer)} and {@link #GetPTPTime(PTPCmd, IntByReference)} instead
	 */
	@Deprecated 
	int GetPTPTime(PTPCmd ptpCmd, IntByReference ptpTime);
	/**
	 * Original signature : <code>int GetPTPTime(PTPCmd*, uint32_t*)</code><br>
	 * <i>native declaration : line 661</i>
	 */
	int GetPTPTime(PTPCmd ptpCmd, IntBuffer ptpTime);
	/**
	 * Original signature : <code>int GetServoPIDParams(PID*)</code><br>
	 * <i>native declaration : line 662</i>
	 */
	int GetServoPIDParams(PID pid);
	/**
	 * Original signature : <code>int SetServoPIDParams(PID*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 663</i><br>
	 * @deprecated use the safer methods {@link #SetServoPIDParams(PID, byte, LongBuffer)} and {@link #SetServoPIDParams(PID, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetServoPIDParams(PID pid, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetServoPIDParams(PID*, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 663</i>
	 */
	int SetServoPIDParams(PID pid, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int GetServoControlLoop(uint8_t, uint8_t*)</code><br>
	 * <i>native declaration : line 664</i><br>
	 * @deprecated use the safer methods {@link #GetServoControlLoop(byte, ByteBuffer)} and {@link #GetServoControlLoop(byte, Pointer)} instead
	 */
	@Deprecated 
	int GetServoControlLoop(byte index, Pointer controlLoop);
	/**
	 * Original signature : <code>int GetServoControlLoop(uint8_t, uint8_t*)</code><br>
	 * <i>native declaration : line 664</i>
	 */
	int GetServoControlLoop(byte index, ByteBuffer controlLoop);
	/**
	 * Original signature : <code>int SetServoControlLoop(uint8_t, uint8_t, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 665</i><br>
	 * @deprecated use the safer methods {@link #SetServoControlLoop(byte, byte, byte, LongBuffer)} and {@link #SetServoControlLoop(byte, byte, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SetServoControlLoop(byte index, byte controlLoop, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SetServoControlLoop(uint8_t, uint8_t, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 665</i>
	 */
	int SetServoControlLoop(byte index, byte controlLoop, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Original signature : <code>int SaveServoPIDParams(uint8_t, uint8_t, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 666</i><br>
	 * @deprecated use the safer methods {@link #SaveServoPIDParams(byte, byte, byte, LongBuffer)} and {@link #SaveServoPIDParams(byte, byte, byte, LongByReference)} instead
	 */
	@Deprecated 
	int SaveServoPIDParams(byte index, byte controlLoop, byte isQueued, LongByReference queuedCmdIndex);
	/**
	 * Original signature : <code>int SaveServoPIDParams(uint8_t, uint8_t, bool, uint64_t*)</code><br>
	 * <i>native declaration : line 666</i>
	 */
	int SaveServoPIDParams(byte index, byte controlLoop, byte isQueued, LongBuffer queuedCmdIndex);
	/**
	 * Queued command<br>
	 * Original signature : <code>int SetQueuedCmdStartExec()</code><br>
	 * <i>native declaration : line 669</i>
	 */
	int SetQueuedCmdStartExec();
	/**
	 * Original signature : <code>int SetQueuedCmdStopExec()</code><br>
	 * <i>native declaration : line 670</i>
	 */
	int SetQueuedCmdStopExec();
	/**
	 * Original signature : <code>int SetQueuedCmdForceStopExec()</code><br>
	 * <i>native declaration : line 671</i>
	 */
	int SetQueuedCmdForceStopExec();
	/**
	 * Original signature : <code>int SetQueuedCmdStartDownload(uint32_t, uint32_t)</code><br>
	 * <i>native declaration : line 672</i>
	 */
	int SetQueuedCmdStartDownload(int totalLoop, int linePerLoop);
	/**
	 * Original signature : <code>int SetQueuedCmdStopDownload()</code><br>
	 * <i>native declaration : line 673</i>
	 */
	int SetQueuedCmdStopDownload();
	/**
	 * Original signature : <code>int SetQueuedCmdClear()</code><br>
	 * <i>native declaration : line 674</i>
	 */
	int SetQueuedCmdClear();
	/**
	 * Original signature : <code>int GetQueuedCmdCurrentIndex(uint64_t*)</code><br>
	 * <i>native declaration : line 675</i><br>
	 * @deprecated use the safer methods {@link #GetQueuedCmdCurrentIndex(LongBuffer)} and {@link #GetQueuedCmdCurrentIndex(LongByReference)} instead
	 */
	@Deprecated 
	int GetQueuedCmdCurrentIndex(LongByReference queuedCmdCurrentIndex);
	/**
	 * Original signature : <code>int GetQueuedCmdCurrentIndex(uint64_t*)</code><br>
	 * <i>native declaration : line 675</i>
	 */
	int GetQueuedCmdCurrentIndex(LongBuffer queuedCmdCurrentIndex);
	public static class FirmwareMode extends PointerType {
		public FirmwareMode(Pointer address) {
			super(address);
		}
		public FirmwareMode() {
			super();
		}
	};
}
